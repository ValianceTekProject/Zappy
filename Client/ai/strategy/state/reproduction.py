##
## EPITECH PROJECT, 2025
## Zappy
## File description:
## ReproductionState - Gestion de la reproduction apr√®s niveau 2 - CORRIG√â
##

import time
from typing import Optional, Any
from ai.strategy.fsm import State, Event
from config import Constants, CommandType
from utils.logger import logger

class ReproductionState(State):
    """
    √âtat de reproduction - Cr√©ation d'un nouvel agent apr√®s niveau 2.
    
    Objectifs:
    1. V√©rifier les conditions de s√©curit√© pour la reproduction
    2. Ex√©cuter la s√©quence connect_nbr -> fork (si n√©cessaire) -> cr√©er agent
    3. G√©rer la logique de l'ancien planner pour les enfants
    4. Transition vers exploration apr√®s succ√®s
    """
    
    def __init__(self, planner):
        super().__init__(planner)
        
        # Phases de reproduction (logique de l'ancien planner)
        self.fork_stage = 0  # 0=init, 1=connect_nbr, 2=fork, 3=cr√©er_agent, 4=termin√©
        self.new_agent_created = False  # Flag pour savoir si l'agent a √©t√© cr√©√©
        self.should_create_agent = False  # Flag pour d√©clencher cr√©ation
        
        # Seuils de s√©curit√©
        self.min_food_for_fork = self._calculate_min_food_for_fork()
        self.reproduction_start_time = time.time()
        self.reproduction_timeout = 30.0  # 30 secondes max
        
        # Statistiques
        self.fork_attempts = 0
        self.max_fork_attempts = 2
        
        logger.info(f"[ReproductionState] üë∂ Pr√©paration reproduction - Food: {self.state.get_food_count()}")

    def execute(self) -> Optional[Any]:
        """
        Logique de reproduction en phases s√©curis√©es.
        Utilise la logique √©prouv√©e de l'ancien planner.
        """
        current_time = time.time()
        
        # 1. V√©rification s√©curit√© alimentaire
        current_food = self.state.get_food_count()
        if current_food < self.min_food_for_fork:
            logger.warning(f"[ReproductionState] Nourriture insuffisante pour fork ({current_food} < {self.min_food_for_fork})")
            return None  # Retour √† la collecte de nourriture
        
        # 2. Timeout de s√©curit√©
        if current_time - self.reproduction_start_time > self.reproduction_timeout:
            logger.warning("[ReproductionState] Timeout reproduction, abandon")
            return None
        
        # 3. ‚úÖ NOUVEAU: V√©rifier si on doit cr√©er un agent
        if self.should_create_agent and not self.new_agent_created:
            self._create_new_agent()
            return None
        
        # 4. Gestion phases de fork (logique originale)
        return self._handle_fork_sequence()

    def _create_new_agent(self):
        """‚úÖ NOUVEAU: Cr√©e effectivement le nouvel agent."""
        logger.info("[ReproductionState] üéâ CR√âATION NOUVEL AGENT")
        
        # ‚úÖ CORRECTION: V√©rifier plusieurs emplacements possibles pour agent_thread
        agent_thread = None
        
        # M√©thode 1: Via self.state.agent_thread
        if hasattr(self.state, 'agent_thread') and self.state.agent_thread is not None:
            agent_thread = self.state.agent_thread
            logger.debug("[ReproductionState] agent_thread trouv√© dans self.state")
        
        # M√©thode 2: Via self.planner.agent_thread (fallback)
        elif hasattr(self.planner, 'agent_thread') and self.planner.agent_thread is not None:
            agent_thread = self.planner.agent_thread
            logger.debug("[ReproductionState] agent_thread trouv√© dans self.planner")
        
        if agent_thread is not None:
            agent_thread.create_new_agent()
            logger.info("[ReproductionState] ‚úÖ Nouvel agent cr√©√© via agent_threads")
        else:
            logger.error("[ReproductionState] ‚ùå Impossible de cr√©er nouvel agent: agent_thread introuvable")
            logger.error(f"[ReproductionState] Debug state: hasattr={hasattr(self.state, 'agent_thread')}, value={getattr(self.state, 'agent_thread', 'MISSING')}")
            logger.error(f"[ReproductionState] Debug planner: hasattr={hasattr(self.planner, 'agent_thread')}, value={getattr(self.planner, 'agent_thread', 'MISSING')}")
        
        # Marquer comme cr√©√© pour √©viter de recr√©er
        self.new_agent_created = True
        self.should_create_agent = False
        self.fork_stage = 4  # Termin√©
        
        # Programmer une vision pour mettre √† jour l'√©tat
        self.context['needs_vision_update'] = True

    def _calculate_min_food_for_fork(self) -> int:
        """Calcule la nourriture minimale pour un fork s√©curis√©."""
        # Estimation co√ªt fork + marge s√©curit√© pour survie parent et enfant
        base_cost = 3  # Co√ªt estim√© du fork
        safety_margin = 10  # Marge pour survie
        
        if self.state.level >= 3:
            return int((base_cost + safety_margin) * 1.5)
        return base_cost + safety_margin

    def _handle_fork_sequence(self) -> Optional[Any]:
        """
        G√®re la s√©quence de fork - LOGIQUE CORRIG√âE.
        """
        if self.fork_stage == 0:
            logger.info("[ReproductionState] Phase 0: V√©rification slots disponibles")
            self.fork_stage = 1
            return self.cmd_mgr.connect_nbr()

        elif self.fork_stage == 1:
            logger.info("[ReproductionState] Phase 1: Analyse r√©ponse connect_nbr")
            
            # R√©cup√©rer la derni√®re r√©ponse connect_nbr
            last_connect = self.cmd_mgr.get_last_success(CommandType.CONNECT_NBR)
            if not last_connect:
                logger.debug("[ReproductionState] Attente r√©ponse connect_nbr...")
                return None

            slots = int(last_connect.response)
            logger.info(f"[ReproductionState] Slots disponibles: {slots}")
            
            if slots == 0 and self._has_enough_for_fork():
                logger.info("[ReproductionState] Aucun slot libre et assez de ressources ‚Üí FORK!")
                self.fork_stage = 2
                return self.cmd_mgr.fork()
            elif slots > 0:
                # ‚úÖ CORRECTION: Si on a des slots, cr√©er directement l'agent
                logger.info(f"[ReproductionState] {slots} slots disponibles ‚Üí Cr√©ation directe d'agent")
                self.should_create_agent = True
                self.fork_stage = 3  # Aller √† la phase de cr√©ation
                return None
            else:
                logger.info(f"[ReproductionState] Conditions non r√©unies (slots={slots}, ressources={self._has_enough_for_fork()})")
                self.fork_stage = 4  # Termin√© sans succ√®s
                return None

        elif self.fork_stage == 2:
            logger.info("[ReproductionState] Phase 2: Attente r√©sultat fork")
            # Le fork est en cours, on attend la r√©ponse
            # La transition se fera via on_command_success/failed
            return None

        elif self.fork_stage == 3:
            logger.info("[ReproductionState] Phase 3: En attente de cr√©ation agent")
            # Cette phase est g√©r√©e par execute() avec should_create_agent
            return None

        elif self.fork_stage == 4:
            logger.info("[ReproductionState] Phase 4: Reproduction termin√©e")
            return None  # Transition vers exploration

        return None

    def _has_enough_for_fork(self) -> bool:
        """
        D√©termine si on a les ressources minimales pour un fork strat√©gique.
        LOGIQUE ORIGINALE de l'ancien planner.
        """
        current_food = self.state.get_food_count()
        return current_food >= self.min_food_for_fork

    def on_command_success(self, command_type, response=None):
        """Gestion du succ√®s des commandes."""
        if command_type == CommandType.CONNECT_NBR:
            logger.info(f"[ReproductionState] ‚úÖ Connect_nbr r√©ussi: {response}")
            # La logique continue dans execute()
            
        elif command_type == CommandType.FORK:
            logger.info(f"[ReproductionState] ‚úÖüéâ FORK R√âUSSI! Slot cr√©√©")
            # ‚úÖ CORRECTION: Apr√®s fork r√©ussi, d√©clencher cr√©ation d'agent
            self.should_create_agent = True
            self.fork_stage = 3

    def on_command_failed(self, command_type, response=None):
        """Gestion des √©checs de commandes."""
        if command_type == CommandType.CONNECT_NBR:
            logger.warning(f"[ReproductionState] ‚ùå Connect_nbr √©chou√©: {response}")
            self.fork_attempts += 1
            
            if self.fork_attempts >= self.max_fork_attempts:
                logger.error("[ReproductionState] Trop d'√©checs connect_nbr, abandon reproduction")
                self.fork_stage = 4
            else:
                # Retry
                self.fork_stage = 0
                
        elif command_type == CommandType.FORK:
            logger.error(f"[ReproductionState] ‚ùå FORK √âCHOU√â: {response}")
            self.fork_attempts += 1
            
            if self.fork_attempts >= self.max_fork_attempts:
                logger.error("[ReproductionState] Abandon reproduction apr√®s √©checs")
                self.fork_stage = 4
            else:
                # Retry depuis le d√©but
                self.fork_stage = 0

    def on_event(self, event: Event) -> Optional[State]:
        """Gestion des √©v√©nements pendant reproduction."""
        if event == Event.FOOD_EMERGENCY:
            logger.error("[ReproductionState] URGENCE ALIMENTAIRE! Abandon reproduction")
            from ai.strategy.state.emergency import EmergencyState
            return EmergencyState(self.planner)
        
        elif event == Event.FOOD_LOW:
            current_food = self.state.get_food_count()
            if current_food <= self.min_food_for_fork:
                logger.warning("[ReproductionState] Nourriture faible, report reproduction")
                from ai.strategy.state.collect_food import CollectFoodState
                return CollectFoodState(self.planner)
        
        return None

    def is_reproduction_complete(self) -> bool:
        """V√©rifie si la reproduction est termin√©e."""
        return self.fork_stage == 4 and self.new_agent_created

    def on_enter(self):
        """Actions √† l'entr√©e de l'√©tat."""
        super().on_enter()
        current_food = self.state.get_food_count()
        
        logger.info(f"[ReproductionState] üë∂ ENTR√âE reproduction - "
                   f"Niveau: {self.state.level}, Food: {current_food}, "
                   f"Seuil: {self.min_food_for_fork}")
        
        # Reset √©tat interne
        self.fork_stage = 0
        self.new_agent_created = False
        self.should_create_agent = False
        self.fork_attempts = 0
        self.reproduction_start_time = time.time()
        
        # Marquer que la reproduction est demand√©e (compatibilit√©)
        self.state.needs_repro = True

    def on_exit(self):
        """Actions √† la sortie de l'√©tat."""
        super().on_exit()
        duration = time.time() - self.reproduction_start_time
        
        if self.new_agent_created:
            logger.info(f"[ReproductionState] ‚úÖ SORTIE avec succ√®s - "
                       f"Reproduction termin√©e en {duration:.1f}s")
        else:
            logger.info(f"[ReproductionState] ‚ùå SORTIE sans succ√®s - "
                       f"Dur√©e: {duration:.1f}s")
        
        # Marquer la reproduction comme termin√©e
        self.state.needs_repro = False