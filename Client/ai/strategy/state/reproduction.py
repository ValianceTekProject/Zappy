##
## EPITECH PROJECT, 2025
## Zappy
## File description:
## Reproduction State - CORRIG√â sans d√©pendance fr√©quence
##

import time
from typing import Any, Optional
from config import CommandType
from utils.logger import logger
from Client.ai.strategy.state.fsm import State, Event

class ReproductionState(State):
    """√âtat de reproduction - CORRIG√â sans calculs de fr√©quence."""
    
    def __init__(self, planner):
        super().__init__(planner)
        
        # ‚úÖ SEUILS FIXES LOGIQUES (pas de calculs de fr√©quence)
        self.min_food_for_fork = 20      # Minimum pour fork
        self.safe_food_threshold = 30    # Seuil de s√©curit√©
        
        # √âtat de reproduction
        self.fork_stage = 0  # 0: check_slots, 1: analyze_response, 2: fork_action, 3: wait_completion
        self.reproduction_attempts = 0
        self.max_attempts = 8
        
        # ‚úÖ TIMEOUTS FIXES EN SECONDES R√âELLES
        self.command_timeout = 15.0      # 15 secondes par commande
        self.fork_timeout = 45.0         # 45 secondes pour fork
        
        # Tracking
        self.stage_start_time = time.time()
        
    def on_enter(self):
        current_food = self._get_real_food_count()
        logger.info(f"[{self.role}] ‚áí REPRODUCTION enter - Food: {current_food}")
        
        # ‚úÖ V√©rifications initiales strictes
        if not self._can_start_reproduction():
            logger.warning("[Reproduction] Conditions non remplies pour reproduction")
            return
        
        # Reset √©tat
        self.fork_stage = 0
        self.reproduction_attempts = 0
        self.stage_start_time = time.time()
        
    def on_event(self, event: Event) -> Optional[State]:
        from ai.strategy.state.emergency import EmergencyState
        from ai.strategy.state.explore import ExploreState
        
        # ‚úÖ Urgence alimentaire prioritaire avec seuil fixe
        current_food = self._get_real_food_count()
        if event == Event.FOOD_CRITICAL or current_food <= 5:
            logger.warning(f"[Reproduction] Urgence alimentaire - abandon reproduction (Food: {current_food})")
            self._reset_reproduction()
            return EmergencyState(self.planner)
            
        # ‚úÖ Sortie si plus besoin de reproduction
        if not self.state.needs_repro:
            logger.info("[Reproduction] Plus besoin de reproduction")
            return ExploreState(self.planner)
            
        return None
        
    def execute(self) -> Optional[Any]:
        self.reproduction_attempts += 1
        current_time = time.time()
        current_food = self._get_real_food_count()
        
        # ‚úÖ Timeout global pour √©viter boucles infinies
        if self.reproduction_attempts > self.max_attempts:
            logger.warning(f"[Reproduction] Timeout apr√®s {self.reproduction_attempts} tentatives")
            self._reset_reproduction()
            return None
        
        # ‚úÖ Timeout par stage avec temps fixes
        stage_duration = current_time - self.stage_start_time
        if stage_duration > self.command_timeout:
            logger.warning(f"[Reproduction] Timeout stage {self.fork_stage} apr√®s {stage_duration:.1f}s")
            if self.fork_stage < 2:  # R√©essayer si pas encore en fork
                self.fork_stage = 0
                self.stage_start_time = current_time
            else:
                self._reset_reproduction()
                return None

        logger.debug(f"[Reproduction] Tentative {self.reproduction_attempts}/{self.max_attempts}, Stage: {self.fork_stage}, Food: {current_food}")
        
        # ‚úÖ V√©rifications de base prioritaires
        if self.state.needs_look:
            logger.debug("[Reproduction] üëÅÔ∏è LOOK requis")
            return self.cmd_mgr.look()
            
        # ‚úÖ Gestion par stages avec logique robuste
        return self._handle_reproduction_stages(current_time, current_food)

    def _handle_reproduction_stages(self, current_time: float, current_food: int) -> Optional[Any]:
        """‚úÖ G√®re les stages de reproduction avec logique compl√®te."""
        
        # ‚úÖ Stage 0: V√©rifier les slots disponibles
        if self.fork_stage == 0:
            logger.info("[Reproduction] Stage 0: V√©rification des slots disponibles")
            self.fork_stage = 1
            self.stage_start_time = current_time
            return self.cmd_mgr.connect_nbr()
            
        # ‚úÖ Stage 1: Analyser la r√©ponse connect_nbr et d√©cider
        elif self.fork_stage == 1:
            last_connect = self.cmd_mgr.get_last_success(CommandType.CONNECT_NBR)
            if not last_connect:
                # Attendre la r√©ponse
                logger.debug("[Reproduction] Stage 1: Attente r√©ponse connect_nbr")
                return None
                
            try:
                slots = int(last_connect.response.strip())
                logger.info(f"[Reproduction] Stage 1: Slots disponibles: {slots}")
                
                # ‚úÖ Logique de d√©cision am√©lior√©e
                if slots == 0:
                    # Pas de slot libre - v√©rifier si on peut/doit faire fork
                    if self._should_do_fork(current_food):
                        logger.info("[Reproduction] Stage 1‚Üí2: Pas de slot libre, cr√©ation via fork")
                        self.fork_stage = 2
                        self.stage_start_time = current_time
                        return self.cmd_mgr.fork()
                    else:
                        logger.info("[Reproduction] Pas assez de ressources pour fork - cr√©ation thread simple")
                        self._create_new_thread()
                        self._reset_reproduction()
                        return None
                else:
                    # Il y a des slots libres - cr√©ation thread simple
                    logger.info(f"[Reproduction] Stage 1: {slots} slots libres - cr√©ation thread simple")
                    self._create_new_thread()
                    self._reset_reproduction()
                    return None
                    
            except (ValueError, AttributeError) as e:
                logger.error(f"[Reproduction] Erreur parsing connect_nbr '{last_connect.response}': {e}")
                # R√©essayer ou abandon selon tentatives
                if self.reproduction_attempts < 3:
                    self.fork_stage = 0
                    self.stage_start_time = current_time
                else:
                    self._reset_reproduction()
                return None
                
        # ‚úÖ Stage 2: Fork lanc√©, attendre la completion avec timeout fixe
        elif self.fork_stage == 2:
            # V√©rifier si fork complet√© avec succ√®s
            last_fork = self.cmd_mgr.get_last_success(CommandType.FORK)
            if last_fork:
                logger.info("[Reproduction] Stage 2: Fork complet√© avec succ√®s")
                # ‚úÖ Apr√®s fork r√©ussi, AUSSI cr√©er un thread
                self._create_new_thread()
                self._reset_reproduction()
                return None
            
            # V√©rifier √©chec de fork
            last_failed = self.cmd_mgr.get_last_failed(CommandType.FORK)
            if last_failed:
                logger.warning("[Reproduction] Stage 2: Fork √©chou√©")
                # Fallback: cr√©er un thread quand m√™me
                self._create_new_thread()
                self._reset_reproduction()
                return None
                
            # ‚úÖ Timeout sp√©cifique pour fork (fixe)
            fork_duration = current_time - self.stage_start_time
            if fork_duration > self.fork_timeout:
                logger.warning(f"[Reproduction] Timeout fork apr√®s {fork_duration:.1f}s")
                # Fallback: cr√©er un thread
                self._create_new_thread()
                self._reset_reproduction()
                return None
            
            # Encore en cours
            logger.debug(f"[Reproduction] Stage 2: Fork en cours ({fork_duration:.1f}s/{self.fork_timeout}s)")
            return None
            
        return None

    def _can_start_reproduction(self) -> bool:
        """‚úÖ V√©rifie si on peut commencer une reproduction."""
        current_food = self._get_real_food_count()
        
        # V√©rifier niveau minimum
        if self.state.level < 2:
            logger.debug("[Reproduction] Niveau trop bas pour reproduction")
            return False
        
        # V√©rifier nourriture minimale pour survie (seuil fixe)
        if current_food < self.safe_food_threshold:
            logger.warning(f"[Reproduction] Nourriture insuffisante: {current_food} < {self.safe_food_threshold}")
            return False
        
        # V√©rifier qu'on n'est pas au niveau max
        if self.state.level >= 8:
            logger.debug("[Reproduction] Niveau maximum atteint")
            return False
        
        return True

    def _should_do_fork(self, current_food: int) -> bool:
        """‚úÖ D√©termine si on doit faire un fork selon les ressources."""
        
        # V√©rifier nourriture suffisante pour fork (seuil fixe)
        if current_food < self.min_food_for_fork:
            logger.info(f"[Reproduction] Pas assez de nourriture pour fork: {current_food} < {self.min_food_for_fork}")
            return False
        
        # ‚úÖ V√©rifier qu'on a au moins les ressources de base selon le niveau
        if self.state.level >= 2:
            # Pour niveau 2+, v√©rifier qu'on a quelques ressources de base
            basic_resources = ['linemate', 'deraumere', 'sibur']
            total_resources = sum(self.state.inventory.get(res, 0) for res in basic_resources)
            
            if total_resources < 2:  # Au moins 2 ressources de base
                logger.info(f"[Reproduction] Pas assez de ressources de base pour fork: {total_resources}")
                return False
        
        logger.info(f"[Reproduction] Conditions OK pour fork: Food={current_food}, Niveau={self.state.level}")
        return True

    def _create_new_thread(self):
        """‚úÖ Cr√©e un nouveau thread d'agent."""
        # ‚úÖ Set new_agent flag pour cr√©er un thread
        self.planner.set_new_agent_flag(True)
        logger.info("[Reproduction] Nouveau thread d'agent planifi√©")

    def _get_real_food_count(self) -> int:
        """Obtient le vrai compte de nourriture."""
        try:
            if hasattr(self.state, 'inventory') and 'food' in self.state.inventory:
                return self.state.inventory['food']
            elif hasattr(self.state, 'get_food_count'):
                return self.state.get_food_count()
            else:
                return 0
        except Exception as e:
            logger.error(f"[Reproduction] Erreur food count: {e}")
            return 0
            
    def _reset_reproduction(self):
        """‚úÖ Reset l'√©tat de reproduction."""
        self.state.needs_repro = False
        self.fork_stage = 0
        self.reproduction_attempts = 0
        logger.debug("[Reproduction] √âtat reproduction reset")