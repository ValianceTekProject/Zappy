##
## EPITECH PROJECT, 2025
## Zappy
## File description:
## Package des √©tats FSM - ai/strategy/state/__init__.py
##

"""
Package des √©tats FSM pour la survie dans Zappy.

Ce package contient tous les √©tats de la machine √† √©tats finis,
chacun g√©rant une strat√©gie sp√©cifique de survie :

√âtats disponibles :
- EmergencyState : Gestion des urgences alimentaires critiques
- CollectFoodState : Collecte pr√©ventive et s√©curis√©e de nourriture  
- CollectResourcesState : Collecte de ressources pour progression
- ExploreState : Exploration intelligente et adaptative

Chaque √©tat h√©rite de la classe State de base et impl√©mente :
- execute() : Logique principale de l'√©tat
- on_enter() : Actions √† l'entr√©e de l'√©tat
- on_exit() : Actions √† la sortie de l'√©tat
- on_event() : Gestion des √©v√©nements et transitions
- on_command_success() : Traitement des succ√®s de commandes
- on_command_failed() : Traitement des √©checs de commandes
"""

from .emergency import EmergencyState
from .collect_food import CollectFoodState
from .collect_resources import CollectResourcesState
from .explore import ExploreState

__all__ = [
    'EmergencyState',
    'CollectFoodState', 
    'CollectResourcesState',
    'ExploreState'
]

# M√©tadonn√©es des √©tats
STATE_METADATA = {
    'EmergencyState': {
        'priority': 1,  # Priorit√© maximale
        'description': 'Gestion des urgences alimentaires critiques',
        'triggers': ['FOOD_EMERGENCY'],
        'color': 'üö®',
        'safety_level': 'CRITICAL'
    },
    'CollectFoodState': {
        'priority': 2,
        'description': 'Collecte pr√©ventive de nourriture',
        'triggers': ['FOOD_LOW'],
        'color': 'üçñ',
        'safety_level': 'WARNING'
    },
    'CollectResourcesState': {
        'priority': 3,
        'description': 'Collecte de ressources pour progression',
        'triggers': ['RESOURCES_FOUND', 'FOOD_SUFFICIENT'],
        'color': '‚öíÔ∏è',
        'safety_level': 'NORMAL'
    },
    'ExploreState': {
        'priority': 4,
        'description': 'Exploration intelligente',
        'triggers': ['FOOD_SUFFICIENT', 'NO_TARGETS'],
        'color': 'üó∫Ô∏è',
        'safety_level': 'SAFE'
    }
}

def get_state_info(state_name: str) -> dict:
    """Retourne les m√©tadonn√©es d'un √©tat."""
    return STATE_METADATA.get(state_name, {})

def get_all_states():
    """Retourne toutes les classes d'√©tats disponibles."""
    return {
        'EmergencyState': EmergencyState,
        'CollectFoodState': CollectFoodState,
        'CollectResourcesState': CollectResourcesState,
        'ExploreState': ExploreState
    }

def create_state_by_name(state_name: str, planner):
    """Factory pour cr√©er un √©tat par son nom."""
    states = get_all_states()
    if state_name in states:
        return states[state_name](planner)
    raise ValueError(f"√âtat inconnu: {state_name}")

def get_state_priority_order():
    """Retourne les √©tats tri√©s par priorit√© (urgence d√©croissante)."""
    return sorted(STATE_METADATA.items(), key=lambda x: x[1]['priority'])

def describe_state_transitions():
    """Retourne une description des transitions possibles entre √©tats."""
    return {
        'EmergencyState': {
            'to': ['CollectFoodState'],
            'condition': 'FOOD_SUFFICIENT'
        },
        'CollectFoodState': {
            'to': ['EmergencyState', 'ExploreState', 'CollectResourcesState'],
            'condition': 'FOOD_EMERGENCY | FOOD_SUFFICIENT | RESOURCES_FOUND'
        },
        'CollectResourcesState': {
            'to': ['EmergencyState', 'CollectFoodState', 'ExploreState'],
            'condition': 'FOOD_EMERGENCY | FOOD_LOW | RESOURCES_COLLECTED'
        },
        'ExploreState': {
            'to': ['EmergencyState', 'CollectFoodState', 'CollectResourcesState'],
            'condition': 'FOOD_EMERGENCY | FOOD_LOW | RESOURCES_FOUND'
        }
    }